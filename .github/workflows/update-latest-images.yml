name: 🐳 Update Latest Images

on:
  schedule:
    - cron: '0 0 * * *' # Runs daily at midnight
  workflow_dispatch:

jobs:
  update-latest-images:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 📋 List all images tagged with 'latest'
        id: list_latest_images
        env:
          GH_TOKEN: ${{ secrets.GH_PACKAGES_CODAQUI_TOKEN }}
        run: |
          echo "::group::🔍 Discovering container packages"
          echo "📡 Fetching container packages from GitHub API..."
          gh api -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" "/orgs/codaqui/packages?package_type=container" > packages.json
          
          ghcr_images=$(cat packages.json | jq -r '.[] | select(.name | startswith("dockerhub-")) | .name')
          image_count=$(echo "$ghcr_images" | wc -l)
          
          echo "✅ Found $image_count dockerhub images:"
          echo "$ghcr_images" | sed 's/^/  📦 /'
          echo "::endgroup::"
          
          echo "images<<EOF" >> $GITHUB_OUTPUT
          echo "$ghcr_images" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo "image_count=$image_count" >> $GITHUB_OUTPUT

      - name: 🔄 Update each 'latest' image
        id: update_images
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true
        run: |
          set +e  # Disable exit on error for this script
          
          # Initialize counters and arrays for summary
          success_count=0
          failed_count=0
          declare -a successful_images=()
          declare -a failed_images=()
          declare -a image_hashes=()
          
          # Create audit file
          audit_file="image_update_audit_$(date +%Y%m%d_%H%M%S).json"
          echo "📝 Creating audit file: $audit_file"
          echo '{"timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'", "workflow_run": "'${{ github.run_id }}'", "images": []}' > "$audit_file"
          
          # Verify audit file was created
          if [ ! -f "$audit_file" ]; then
            echo "❌ Failed to create audit file"
            audit_file=""
          else
            echo "✅ Audit file created successfully: $audit_file"
          fi
          
          # Get images from previous step
          images_input="${{ steps.list_latest_images.outputs.images }}"
          if [ -z "$images_input" ]; then
            echo "❌ No images found from previous step"
            exit 0
          fi
          
          # Convert multiline string to array
          readarray -t images <<< "$images_input"
          
          # Filter out empty lines
          filtered_images=()
          for img in "${images[@]}"; do
            if [ -n "$img" ] && [ "$img" != "" ]; then
              filtered_images+=("$img")
            fi
          done
          images=("${filtered_images[@]}")
          
          total_images=${#images[@]}
          current_image=0
          
          echo "🚀 Starting update process for $total_images images..."
          echo "::group::📊 Processing Summary"
          echo "Total images to process: $total_images"
          echo "::endgroup::"
          
          # Exit if no images to process
          if [ $total_images -eq 0 ]; then
            echo "⚠️ No images to process"
            echo "success_count=0" >> $GITHUB_OUTPUT
            echo "failed_count=0" >> $GITHUB_OUTPUT
            echo "audit_file=$audit_file" >> $GITHUB_OUTPUT
            echo "successful_images=" >> $GITHUB_OUTPUT
            echo "failed_images=" >> $GITHUB_OUTPUT
            echo "image_hashes=" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          for image in "${images[@]}"; do
            # Skip empty images
            if [ -z "$image" ] || [ "$image" == "" ]; then
              continue
            fi
            
            ((current_image++))
            echo "::group::🐳 [$current_image/$total_images] Processing: $image"
            
            # Remove the 'dockerhub-' prefix from the image name
            clean_image=${image#dockerhub-}
            echo "🏷️  Original name: $image"
            echo "🔧 Clean name: $clean_image"
            
            # Skip if clean_image is empty
            if [ -z "$clean_image" ]; then
              echo "❌ Clean image name is empty, skipping"
              echo "::endgroup::"
              continue
            fi
            
            # Initialize image audit entry
            image_audit='{"name": "'$clean_image'", "status": "processing", "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'", "pull_method": "", "hashes": {}}'
            
            # Try to pull the image with fallback logic
            pull_success=false
            pull_method=""
            
            echo "📥 Attempting to pull image from Docker Hub..."
            
            # Try standard format first
            if docker pull "docker.io/$clean_image:latest" >/dev/null 2>&1; then
              echo "✅ Successfully pulled using standard format: docker.io/$clean_image:latest"
              pull_success=true
              pull_method="standard"
            else
              echo "⚠️  Standard format failed, trying repetitive format..."
              # Try repetitive format
              if docker pull "docker.io/$clean_image/$clean_image:latest" >/dev/null 2>&1; then
                echo "✅ Successfully pulled using repetitive format: docker.io/$clean_image/$clean_image:latest"
                echo "🔗 Creating alias tag for consistency..."
                if docker tag "docker.io/$clean_image/$clean_image:latest" "docker.io/$clean_image:latest" >/dev/null 2>&1; then
                  pull_success=true
                  pull_method="repetitive"
                else
                  echo "❌ Failed to create alias tag"
                  pull_success=false
                fi
              else
                echo "❌ Both pull methods failed for $clean_image"
                pull_success=false
              fi
            fi
            
            if [ "$pull_success" = true ]; then
              # Get image hash for audit
              source_hash=$(docker inspect "docker.io/$clean_image:latest" --format='{{.Id}}' 2>/dev/null | cut -d: -f2 | head -c 12)
              if [ -z "$source_hash" ]; then
                source_hash="unknown"
              fi
              echo "🔐 Source image hash: $source_hash"
              
              # Check if we already have this image in GHCR to avoid unnecessary pushes
              image_name_push="dockerhub-$clean_image"
              ghcr_tag="ghcr.io/${{ github.repository_owner }}/$image_name_push:latest"
              
              echo "🔍 Checking if image already exists in GHCR..."
              existing_hash=""
              if docker manifest inspect "$ghcr_tag" >/dev/null 2>&1; then
                # Try to get the existing image
                if docker pull "$ghcr_tag" >/dev/null 2>&1; then
                  existing_hash=$(docker inspect "$ghcr_tag" --format='{{.Id}}' 2>/dev/null | cut -d: -f2 | head -c 12)
                  echo "📦 Existing GHCR image hash: $existing_hash"
                  
                  if [ "$source_hash" = "$existing_hash" ]; then
                    echo "✅ Image is already up-to-date in GHCR (same hash)"
                    echo "🏷️  Re-tagging to update metadata..."
                  else
                    echo "🔄 Image has changed, update needed"
                    echo "   Source: $source_hash"
                    echo "   GHCR:   $existing_hash"
                  fi
                else
                  echo "⚠️  Could not pull existing image for comparison"
                fi
              else
                echo "📦 Image does not exist in GHCR yet"
              fi
              
              # Tag the image for GitHub Packages
              
              echo "🏷️  Tagging for GHCR: $ghcr_tag"
              if docker tag "docker.io/$clean_image:latest" "$ghcr_tag" >/dev/null 2>&1; then
                # Get image info before push
                echo "📊 Image info before push:"
                docker images --format "table {{.Repository}}:{{.Tag}}\t{{.ImageID}}\t{{.CreatedAt}}\t{{.Size}}" | grep -E "(REPOSITORY|$clean_image)" || echo "No matching images found"
                
                # Push the image to GitHub Packages
                echo "📤 Pushing to GitHub Container Registry..."
                push_start_time=$(date -u +%Y-%m-%dT%H:%M:%SZ)
                if docker push "$ghcr_tag" 2>&1 | tee push_output.log; then
                  push_end_time=$(date -u +%Y-%m-%dT%H:%M:%SZ)
                  echo "✅ Push completed at $push_end_time"
                  
                  # Verify the push was successful by checking the registry
                  echo "🔍 Verifying push to registry..."
                  if docker manifest inspect "$ghcr_tag" >/dev/null 2>&1; then
                    echo "✅ Image verified in registry"
                  else
                    echo "⚠️  Warning: Could not verify image in registry"
                  fi
                  
                  # Get pushed image hash
                  pushed_hash=$(docker inspect "$ghcr_tag" --format='{{.Id}}' 2>/dev/null | cut -d: -f2 | head -c 12)
                  if [ -z "$pushed_hash" ]; then
                    pushed_hash="$source_hash"
                  fi
                  echo "✅ Successfully pushed to GHCR"
                  echo "🔐 Pushed image hash: $pushed_hash"
                  echo "⏱️  Push duration: $push_start_time to $push_end_time"
                  
                  # Show push output summary
                  if [ -f push_output.log ]; then
                    echo "📋 Push summary:"
                    grep -E "(Pushed|Already exists|Layer already exists)" push_output.log || echo "No layer information found"
                    rm -f push_output.log
                  fi
                  
                  # Final verification - check if timestamp updated
                  echo "🕐 Final verification of update..."
                  if command -v gh >/dev/null 2>&1; then
                    echo "📊 Checking package information via GitHub API..."
                    gh api -H "Accept: application/vnd.github+json" \
                      "/orgs/${{ github.repository_owner }}/packages/container/$image_name_push" \
                      --jq '.updated_at' 2>/dev/null | head -1 | \
                      xargs -I {} echo "🕐 Package last updated: {}" || echo "⚠️  Could not fetch package metadata"
                  fi
                  
                  successful_images+=("$clean_image")
                  image_hashes+=("$clean_image:$source_hash->$pushed_hash")
                  ((success_count++))
                  
                  # Update audit entry
                  image_audit='{"name": "'$clean_image'", "status": "success", "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'", "pull_method": "'$pull_method'", "hashes": {"source": "'$source_hash'", "pushed": "'$pushed_hash'"}}'
                else
                  echo "❌ Failed to push to GHCR"
                  failed_images+=("$clean_image (push failed)")
                  ((failed_count++))
                  image_audit='{"name": "'$clean_image'", "status": "push_failed", "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'", "pull_method": "'$pull_method'", "hashes": {"source": "'$source_hash'"}}'
                fi
              else
                echo "❌ Failed to tag image for GHCR"
                failed_images+=("$clean_image (tag failed)")
                ((failed_count++))
                image_audit='{"name": "'$clean_image'", "status": "tag_failed", "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'", "pull_method": "'$pull_method'", "hashes": {"source": "'$source_hash'"}}'
              fi
            else
              echo "❌ Skipping $clean_image due to pull failure"
              failed_images+=("$clean_image (pull failed)")
              ((failed_count++))
              image_audit='{"name": "'$clean_image'", "status": "pull_failed", "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'", "pull_method": "none", "hashes": {}}'
            fi
            
            # Add to audit file
            if [ -n "$audit_file" ] && [ -f "$audit_file" ]; then
              temp_audit=$(mktemp)
              if jq --argjson entry "$image_audit" '.images += [$entry]' "$audit_file" > "$temp_audit" 2>/dev/null && mv "$temp_audit" "$audit_file" 2>/dev/null; then
                echo "✅ Added audit entry for $clean_image"
              else
                echo "⚠️  Failed to add audit entry for $clean_image"
                rm -f "$temp_audit" 2>/dev/null
              fi
            else
              echo "⚠️  Audit file not available, skipping audit entry"
            fi
            
            echo "::endgroup::"
          done
          
          # Save results for summary
          echo "success_count=$success_count" >> $GITHUB_OUTPUT
          echo "failed_count=$failed_count" >> $GITHUB_OUTPUT
          echo "audit_file=$audit_file" >> $GITHUB_OUTPUT
          
          # Create arrays output for summary
          if [ ${#successful_images[@]} -gt 0 ]; then
            printf -v successful_images_str '%s,' "${successful_images[@]}"
            echo "successful_images=${successful_images_str%,}" >> $GITHUB_OUTPUT
          else
            echo "successful_images=" >> $GITHUB_OUTPUT
          fi
          
          if [ ${#failed_images[@]} -gt 0 ]; then
            printf -v failed_images_str '%s,' "${failed_images[@]}"
            echo "failed_images=${failed_images_str%,}" >> $GITHUB_OUTPUT
          else
            echo "failed_images=" >> $GITHUB_OUTPUT
          fi
          
          if [ ${#image_hashes[@]} -gt 0 ]; then
            printf -v image_hashes_str '%s,' "${image_hashes[@]}"
            echo "image_hashes=${image_hashes_str%,}" >> $GITHUB_OUTPUT
          else
            echo "image_hashes=" >> $GITHUB_OUTPUT
          fi
          
          echo "::group::📈 Final Results"
          echo "✅ Successful: $success_count"
          echo "❌ Failed: $failed_count"
          echo "📋 Total: $total_images"
          echo ""
          echo "🔍 Diagnostic Information:"
          echo "- If 'Last published' shows old dates, it might be because:"
          echo "  1. Images are identical (same hash, no real update needed)"
          echo "  2. GitHub Container Registry UI cache"
          echo "  3. Push succeeded but metadata not refreshed"
          echo "- Check the detailed logs above for hash comparisons"
          echo "- Look for 'Layer already exists' vs 'Pushed' messages"
          echo "::endgroup::"
          
          # Exit with success even if some images failed
          exit 0

      - name: 📊 Generate Job Summary
        if: always()
        continue-on-error: true
        run: |
          set +e  # Disable exit on error for summary generation
          
          echo "# 🐳 Docker Images Update Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**🕐 Execution Time:** $(date -u +%Y-%m-%d\ %H:%M:%S\ UTC)" >> $GITHUB_STEP_SUMMARY
          echo "**🔄 Workflow Run:** [\#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Get values with defaults
          total_images="${{ steps.list_latest_images.outputs.image_count || '0' }}"
          success_count="${{ steps.update_images.outputs.success_count || '0' }}"
          failed_count="${{ steps.update_images.outputs.failed_count || '0' }}"
          
          # Statistics
          echo "## 📈 Statistics" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Count |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| 📦 Total Images | $total_images |" >> $GITHUB_STEP_SUMMARY
          echo "| ✅ Successful | $success_count |" >> $GITHUB_STEP_SUMMARY
          echo "| ❌ Failed | $failed_count |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Success rate calculation
          if [ "$total_images" -gt 0 ]; then
            success_rate=$(( success_count * 100 / total_images ))
            echo "**📊 Success Rate:** ${success_rate}%" >> $GITHUB_STEP_SUMMARY
          else
            echo "**📊 Success Rate:** N/A (no images processed)" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Successful images
          successful_images="${{ steps.update_images.outputs.successful_images }}"
          if [ -n "$successful_images" ] && [ "$successful_images" != "" ]; then
            echo "## ✅ Successfully Updated Images" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            IFS=',' read -ra SUCCESSFUL <<< "$successful_images"
            for img in "${SUCCESSFUL[@]}"; do
              if [ -n "$img" ] && [ "$img" != "" ]; then
                echo "- 🐳 \`$img\`" >> $GITHUB_STEP_SUMMARY
              fi
            done
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Failed images
          failed_images="${{ steps.update_images.outputs.failed_images }}"
          if [ -n "$failed_images" ] && [ "$failed_images" != "" ]; then
            echo "## ❌ Failed Images" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            IFS=',' read -ra FAILED <<< "$failed_images"
            for img in "${FAILED[@]}"; do
              if [ -n "$img" ] && [ "$img" != "" ]; then
                echo "- 🚫 \`$img\`" >> $GITHUB_STEP_SUMMARY
              fi
            done
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Audit hashes
          image_hashes="${{ steps.update_images.outputs.image_hashes }}"
          if [ -n "$image_hashes" ] && [ "$image_hashes" != "" ]; then
            echo "## 🔐 Image Hashes (Audit Trail)" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "<details>" >> $GITHUB_STEP_SUMMARY
            echo "<summary>Click to expand hash information</summary>" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| Image | Source Hash | Pushed Hash |" >> $GITHUB_STEP_SUMMARY
            echo "|-------|-------------|-------------|" >> $GITHUB_STEP_SUMMARY
            
            # Try to parse hashes safely
            if IFS=',' read -ra HASHES <<< "$image_hashes"; then
              for hash_info in "${HASHES[@]}"; do
                if [ -n "$hash_info" ]; then
                  # Try parameter expansion method first
                  if [[ "$hash_info" == *":"* ]] && [[ "$hash_info" == *"->"* ]]; then
                    image_name="${hash_info%%:*}"
                    hash_part="${hash_info#*:}"
                    source_hash="${hash_part%%->*}"
                    pushed_hash="${hash_part#*->}"
                    echo "| \`$image_name\` | \`$source_hash\` | \`$pushed_hash\` |" >> $GITHUB_STEP_SUMMARY
                  else
                    # Fallback: just show the raw hash info
                    echo "| \`$hash_info\` | Raw data | - |" >> $GITHUB_STEP_SUMMARY
                  fi
                fi
              done
            else
              echo "| Error parsing | hash data | - |" >> $GITHUB_STEP_SUMMARY
            fi
            
            echo "</details>" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Audit file info
          audit_file="${{ steps.update_images.outputs.audit_file }}"
          echo "## 📋 Audit Information" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ -n "$audit_file" ] && [ "$audit_file" != "" ]; then
            echo "- **📝 Audit File:** \`$audit_file\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **📝 Audit File:** Not available" >> $GITHUB_STEP_SUMMARY
          fi
          echo "- **🔍 Full audit trail available in workflow logs**" >> $GITHUB_STEP_SUMMARY
          
          # Add troubleshooting section if there were failures
          if [ "$failed_count" -gt 0 ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "## 🔧 Troubleshooting" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "If images failed to update, check:" >> $GITHUB_STEP_SUMMARY
            echo "- 🔍 Image exists on Docker Hub" >> $GITHUB_STEP_SUMMARY
            echo "- 🔐 Authentication to GHCR is working" >> $GITHUB_STEP_SUMMARY
            echo "- 🌐 Network connectivity to Docker Hub" >> $GITHUB_STEP_SUMMARY
            echo "- 📋 Detailed logs in the workflow run above" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Ensure summary generation always succeeds
          exit 0

      - name: 📤 Upload Audit File
        if: always() && steps.update_images.outputs.audit_file != ''
        uses: actions/upload-artifact@v4
        with:
          name: image-update-audit-${{ github.run_id }}
          path: ${{ steps.update_images.outputs.audit_file }}
          retention-days: 90
          if-no-files-found: warn
