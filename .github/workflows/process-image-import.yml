name: üöÄ Process Image Import Request

on:
  issues:
    types: [opened, labeled]  # Removed 'edited' to prevent duplicates

jobs:
  process-import-request:
    if: contains(github.event.issue.labels.*.name, 'import-request') && !contains(github.event.issue.labels.*.name, 'processing')
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read
      packages: write
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üè∑Ô∏è Mark issue as processing
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.issues.addLabels({
              issue_number: context.payload.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['processing']
            });

      - name: üìã Extract issue data
        id: extract_data
        uses: actions/github-script@v6
        with:
          script: |
            const issue = context.payload.issue
            const body = issue.body
            
            console.log('::group::üîç Parsing issue data')
            console.log('üìÑ Issue body:', body);
            console.log('::endgroup::')
            console.log('::group::üìä Regex matches')
            
            // Parse the form data
            const sourceMatch = body.match(/### Image Source\s*\n\s*(.*)/);
            const repoMatch = body.match(/### Repository\/Organization Name\s*\n\s*(.*)/);
            const imageMatch = body.match(/### Image Name\s*\n\s*(.*)/);
            const versionMatch = body.match(/### Image Version\/Tag\s*\n\s*(.*)/);
            const useLatestMatch = body.match(/- \[(?:x|X)\] Import the latest version of this image \(recommended for most use cases\)/);
            const isOfficialMatch = body.match(/- \[(?:x|X)\] This is an official Docker Hub image/);
            
            console.log('üîç Raw matches:', {
              sourceMatch: sourceMatch ? sourceMatch[1] : null,
              repoMatch: repoMatch ? repoMatch[1] : null,
              imageMatch: imageMatch ? imageMatch[1] : null,
              versionMatch: versionMatch ? versionMatch[1] : null,
              useLatestMatch: Boolean(useLatestMatch),
              isOfficialMatch: Boolean(isOfficialMatch)
            });
            
            const source = sourceMatch ? sourceMatch[1].trim() : null;
            const repo = repoMatch && repoMatch[1].trim() !== '' ? repoMatch[1].trim() : null;
            const image = imageMatch ? imageMatch[1].trim() : null;
            const version = versionMatch && versionMatch[1].trim() !== '' ? versionMatch[1].trim() : null;
            const useLatest = Boolean(useLatestMatch);
            const isOfficial = Boolean(isOfficialMatch);
            
            const imageTag = useLatest || !version ? 'latest' : version;
            
            console.log('üìä Parsed data:', {
              source,
              repo,
              image,
              version: imageTag,
              useLatest,
              isOfficial
            })
            console.log('::endgroup::')
            
            if (!source || !image) {
              await github.rest.issues.createComment({
                issue_number: issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: '‚ùå **Error: Missing required information**\n\nPlease make sure to provide source and image name.'
              });
              
              await github.rest.issues.addLabels({
                issue_number: issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                labels: ['invalid']
              });
              
              return core.setFailed('Missing required information');
            }
            
            // For non-official images, repository is required
            if (!isOfficial && !repo) {
              await github.rest.issues.createComment({
                issue_number: issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: '‚ùå **Error: Repository/Organization name required**\\n\\n' +
                      '**Issue**: Repository/Organization name is required for non-official images.\\n\\n' +
                      '**Solutions**:\\n' +
                      '1. Fill in the "Repository/Organization Name" field (e.g., "jetbrains" for jetbrains/code-with-me-relay)\\n' +
                      '2. OR check the "This is an official Docker Hub image" option if this image does not belong to an organization\\n\\n' +
                      '**Detected values**:\\n' +
                      '- Image Source: `' + (source || 'not detected') + '`\\n' +
                      '- Repository/Organization Name: `' + (repo || 'empty/not detected') + '`\\n' +
                      '- Image Name: `' + (image || 'not detected') + '`\\n' +
                      '- Is Official Image: `' + isOfficial + '`'
              });
              
              await github.rest.issues.addLabels({
                issue_number: issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                labels: ['invalid']
              });
              
              return core.setFailed('Missing repository name for non-official image');
            }
            
            core.setOutput('source', source);
            core.setOutput('repo', repo || 'library');
            core.setOutput('image', image);
            core.setOutput('version', imageTag);
            core.setOutput('isOfficial', isOfficial);
            core.setOutput('useLatest', useLatest.toString());
            
            // Format the source image string based on whether it's an official image or not
            const sourceImageDisplay = isOfficial ? `${image}:${imageTag}` : `${repo}/${image}:${imageTag}`;
            
            core.setOutput('sourceImageDisplay', sourceImageDisplay);
            
            // Add initial processing comment
            await github.rest.issues.createComment({
              issue_number: issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## üîÑ Processing Import Request
              
              üìã **Request Details:**
              - **Source:** ${source}
              - **Image:** \`${sourceImageDisplay}\`
              - **Type:** ${isOfficial ? 'üì¶ Official Image' : 'üè¢ Repository Image'}
              - **Version:** \`${imageTag}\`
              
              üöÄ Starting import process. Please wait...`
            });

      - name: üîß Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üîê Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: üê≥ Pull and push image
        id: docker_pull_push
        continue-on-error: true
        env:
          SOURCE_REPO: ${{ steps.extract_data.outputs.repo }}
          IMAGE_NAME: ${{ steps.extract_data.outputs.image }}
          IMAGE_VERSION: ${{ steps.extract_data.outputs.version }}
          IS_OFFICIAL: ${{ steps.extract_data.outputs.isOfficial }}
          USE_LATEST: ${{ steps.extract_data.outputs.useLatest }}
          SOURCE_IMAGE_DISPLAY: ${{ steps.extract_data.outputs.sourceImageDisplay }}
        run: |
          set +e  # Disable exit on error
          
          # Initialize audit file
          audit_file="image_import_audit_$(date +%Y%m%d_%H%M%S).json"
          echo "üìù Creating audit file: $audit_file"
          echo '{"timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'", "workflow_run": "'${{ github.run_id }}'", "request": {"source": "'$SOURCE_IMAGE_DISPLAY'", "target": "", "status": "processing"}}' > "$audit_file"
          
          echo "::group::üîç Import Process Details"
          
          # Handle official images vs repository images
          if [[ "$IS_OFFICIAL" == "true" ]]; then
            SOURCE_IMAGE="${IMAGE_NAME}:${IMAGE_VERSION}"
          else
            SOURCE_IMAGE="${SOURCE_REPO}/${IMAGE_NAME}:${IMAGE_VERSION}"
          fi
          
          # Determine correct target naming with improved conflict resolution
          # For organization/repo images, we want to include the org to avoid conflicts
          if [[ "$SOURCE_IMAGE" == *"/"* ]] && [[ "$IS_OFFICIAL" != "true" ]]; then
            # For non-official images, include organization to avoid conflicts
            # Example: bitnami/nginx -> dockerhub-bitnami-nginx
            
            # IMPORTANT: Check for hyphen in organization name (incompatible)
            if [[ "$SOURCE_REPO" == *"-"* ]]; then
              echo "‚ùå **ERROR: Organization name contains hyphen**"
              echo ""
              echo "Organization: \`$SOURCE_REPO\`"
              echo "Image: \`$IMAGE_NAME\`"
              echo ""
              echo "**Issue**: Organization names with hyphens are not supported due to naming conflicts in the \`dockerhub-<org>-<image>\` pattern."
              echo ""
              echo "**Recommended Solutions:**"
              echo "1. Use the full image name format: \`$SOURCE_REPO/$IMAGE_NAME\`"
              echo "2. Contact the repository maintainer to discuss alternatives"
              echo ""
              echo "**Technical Details:**"
              echo "- Target pattern would be: \`dockerhub-$SOURCE_REPO-$IMAGE_NAME\`"
              echo "- This creates ambiguity in reverse mapping for automatic updates"
              echo "- Current system prioritizes reliable automation over edge case support"
              
              await github.rest.issues.createComment({
                issue_number: issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: '‚ùå **Error: Organization name with hyphen not supported**\\n\\n' +
                      '**Organization**: `' + process.env.SOURCE_REPO + '`\\n' +
                      '**Image**: `' + process.env.IMAGE_NAME + '`\\n\\n' +
                      '**Issue**: Organization names with hyphens are not supported due to naming conflicts in the `dockerhub-<org>-<image>` pattern.\\n\\n' +
                      '**Recommended Solutions:**\\n' +
                      '1. Use official images when possible\\n' +
                      '2. Choose organizations without hyphens in the name\\n' +
                      '3. Contact maintainers for alternative solutions\\n\\n' +
                      '**Technical Details:**\\n' +
                      '- Target would be: `dockerhub-' + process.env.SOURCE_REPO + '-' + process.env.IMAGE_NAME + '`\\n' +
                      '- This creates ambiguity in reverse mapping for automatic updates\\n' +
                      '- System prioritizes reliable automation over edge case support'
              });
              
              await github.rest.issues.addLabels({
                issue_number: issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                labels: ['invalid', 'naming-conflict']
              });
              
              return core.setFailed('Organization name contains hyphen - not supported');
            fi
            
            ORG_NAME=$(echo "$SOURCE_REPO" | sed 's/[^a-zA-Z0-9._]/-/g')
            CLEAN_IMAGE_NAME=$(echo "$IMAGE_NAME" | sed 's/[^a-zA-Z0-9._-]/-/g')
            
            # Additional safety: ensure we don't have empty names
            if [[ -z "$CLEAN_IMAGE_NAME" ]]; then
              echo "‚ö†Ô∏è  Warning: Empty image name after extraction, using full image name"
              CLEAN_IMAGE_NAME="$IMAGE_NAME"
            fi
            if [[ -z "$ORG_NAME" ]]; then
              echo "‚ö†Ô∏è  Warning: Empty org name, using repo name"
              ORG_NAME="$SOURCE_REPO"
            fi
            
            TARGET_IMAGE="ghcr.io/${{ github.repository_owner }}/dockerhub-${ORG_NAME}-${CLEAN_IMAGE_NAME}:${IMAGE_VERSION}"
            
            # Store detailed mapping for audit and future reference  
            IMAGE_MAPPING='{"source_pattern": "'$SOURCE_IMAGE'", "target_pattern": "dockerhub-'$ORG_NAME'-'$CLEAN_IMAGE_NAME'", "mapping_type": "org_image_combination", "original_repo": "'$SOURCE_REPO'", "original_image": "'$IMAGE_NAME'", "org_name": "'$ORG_NAME'", "image_name": "'$CLEAN_IMAGE_NAME'", "created": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'", "notes": "Combined org and image name to avoid conflicts"}'
            echo "üóÇÔ∏è  Image mapping (org+image): $IMAGE_MAPPING"
          else
            # Standard naming for official images or simple names
            # Sanitize the name for safety
            SANITIZED_NAME=$(echo "$IMAGE_NAME" | sed 's/[^a-zA-Z0-9._-]/-/g')
            TARGET_IMAGE="ghcr.io/${{ github.repository_owner }}/dockerhub-${SANITIZED_NAME}:${IMAGE_VERSION}"
            IMAGE_MAPPING='{"source_pattern": "'$SOURCE_IMAGE'", "target_pattern": "dockerhub-'$SANITIZED_NAME'", "mapping_type": "standard", "original_image": "'$IMAGE_NAME'", "sanitized_name": "'$SANITIZED_NAME'", "created": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'", "notes": "Standard naming pattern for official or simple images"}'
            echo "üóÇÔ∏è  Image mapping (standard): $IMAGE_MAPPING"
          fi
          
          echo "üìä Image Information:"
          echo "   üîπ Source: $SOURCE_IMAGE"
          echo "   üîπ Target: $TARGET_IMAGE"
          echo "   üîπ Type: $([ "$IS_OFFICIAL" == "true" ] && echo "Official" || echo "Repository")"
          echo "::endgroup::"
          
          # Check if target image already exists
          echo "::group::üîç Checking existing image"
          image_exists=false
          existing_digest=""
          
          if docker manifest inspect "$TARGET_IMAGE" >/dev/null 2>&1; then
            echo "üì¶ Target image already exists in GHCR"
            image_exists=true
            
            if docker pull "$TARGET_IMAGE" >/dev/null 2>&1; then
              existing_digest=$(docker inspect "$TARGET_IMAGE" --format='{{.Id}}' 2>/dev/null | cut -d: -f2 | head -c 12)
              echo "üîê Existing image hash: $existing_digest"
            fi
            
            if [[ "$IMAGE_VERSION" == "latest" || "$USE_LATEST" == "true" ]]; then
              echo "üîÑ This is a 'latest' request - will update existing image"
            else
              echo "‚ö†Ô∏è  Non-latest image already exists - will skip"
              echo "image_exists=true" >> $GITHUB_OUTPUT
              echo "update_needed=false" >> $GITHUB_OUTPUT
              echo "target_image=$TARGET_IMAGE" >> $GITHUB_OUTPUT
              echo "audit_file=$audit_file" >> $GITHUB_OUTPUT
              echo "image_mapping=$IMAGE_MAPPING" >> $GITHUB_OUTPUT
              exit 0
            fi
          else
            echo "üì¶ Image does not exist in GHCR yet"
          fi
          echo "::endgroup::"
          
          # Pull source image
          echo "::group::üì• Pulling source image"
          pull_success=false
          pull_method=""
          
          echo "üì• Attempting to pull: $SOURCE_IMAGE"
          if docker pull "$SOURCE_IMAGE" >/dev/null 2>&1; then
            echo "‚úÖ Successfully pulled: $SOURCE_IMAGE"
            pull_success=true
            pull_method="direct"
          else
            echo "‚ö†Ô∏è  Direct pull failed, trying alternative formats..."
            
            # Try with library prefix for official images
            if [[ "$IS_OFFICIAL" == "true" ]]; then
              alt_source="library/$SOURCE_IMAGE"
              echo "üì• Trying: $alt_source"
              if docker pull "$alt_source" >/dev/null 2>&1; then
                echo "‚úÖ Successfully pulled: $alt_source"
                docker tag "$alt_source" "$SOURCE_IMAGE"
                pull_success=true
                pull_method="library_prefix"
              fi
            fi
            
            # Try repetitive format for complex names
            if [[ "$pull_success" == "false" ]] && [[ "$SOURCE_IMAGE" == *"/"* ]]; then
              # Extract repo and image for repetitive format
              repo_part=$(echo "$SOURCE_IMAGE" | cut -d: -f1 | cut -d/ -f1)
              image_part=$(echo "$SOURCE_IMAGE" | cut -d: -f1 | cut -d/ -f2)
              version_part=$(echo "$SOURCE_IMAGE" | cut -d: -f2)
              
              alt_source="$repo_part/$image_part/$image_part:$version_part"
              echo "üì• Trying repetitive format: $alt_source"
              if docker pull "$alt_source" >/dev/null 2>&1; then
                echo "‚úÖ Successfully pulled: $alt_source"
                docker tag "$alt_source" "$SOURCE_IMAGE"
                pull_success=true
                pull_method="repetitive"
              fi
            fi
          fi
          
          if [[ "$pull_success" == "false" ]]; then
            echo "‚ùå Failed to pull source image with all methods"
            echo "pull_success=false" >> $GITHUB_OUTPUT
            echo "audit_file=$audit_file" >> $GITHUB_OUTPUT
            exit 1
          fi
          echo "::endgroup::"
          
          # Get source image details
          echo "::group::üîê Image analysis"
          source_hash=$(docker inspect "$SOURCE_IMAGE" --format='{{.Id}}' 2>/dev/null | cut -d: -f2 | head -c 12)
          source_size=$(docker inspect "$SOURCE_IMAGE" --format='{{.Size}}' 2>/dev/null)
          source_created=$(docker inspect "$SOURCE_IMAGE" --format='{{.Created}}' 2>/dev/null)
          
          echo "üìä Source image details:"
          echo "   üîê Hash: $source_hash"
          echo "   üìè Size: $source_size bytes"
          echo "   üïê Created: $source_created"
          echo "   üîß Pull method: $pull_method"
          
          # Check if update is needed
          update_needed=true
          if [[ "$image_exists" == "true" ]] && [[ "$source_hash" == "$existing_digest" ]]; then
            echo "‚úÖ Source and target have same hash - no update needed"
            update_needed=false
          fi
          echo "::endgroup::"
          
          # Tag and push
          if [[ "$update_needed" == "true" ]] || [[ "$image_exists" == "false" ]]; then
            echo "::group::üì§ Pushing to GHCR"
            echo "üè∑Ô∏è  Tagging: $SOURCE_IMAGE -> $TARGET_IMAGE"
            if docker tag "$SOURCE_IMAGE" "$TARGET_IMAGE" >/dev/null 2>&1; then
              echo "üì§ Pushing to GitHub Container Registry..."
              push_start=$(date -u +%Y-%m-%dT%H:%M:%SZ)
              
              if docker push "$TARGET_IMAGE" 2>&1 | tee push_output.log; then
                push_end=$(date -u +%Y-%m-%dT%H:%M:%SZ)
                echo "‚úÖ Successfully pushed to GHCR"
                echo "‚è±Ô∏è  Push duration: $push_start to $push_end"
                
                # Get target hash
                target_hash=$(docker inspect "$TARGET_IMAGE" --format='{{.Id}}' 2>/dev/null | cut -d: -f2 | head -c 12)
                echo "üîê Target hash: $target_hash"
                
                # Show push summary
                if [ -f push_output.log ]; then
                  echo "üìã Push summary:"
                  grep -E "(Pushed|Already exists|Layer already exists)" push_output.log || echo "No layer information found"
                  rm -f push_output.log
                fi
                
                push_success=true
              else
                echo "‚ùå Failed to push to GHCR"
                push_success=false
              fi
            else
              echo "‚ùå Failed to tag image"
              push_success=false
            fi
            echo "::endgroup::"
          else
            echo "‚ÑπÔ∏è  No push needed - image is up to date"
            target_hash="$existing_digest"
            push_success=true
          fi
          
          # Update audit file
          if [ -f "$audit_file" ]; then
            temp_audit=$(mktemp)
            jq --arg target "$TARGET_IMAGE" \
               --arg status "$([ "$push_success" == "true" ] && echo "success" || echo "failed")" \
               --arg source_hash "$source_hash" \
               --arg target_hash "$target_hash" \
               --arg pull_method "$pull_method" \
               --arg image_exists "$image_exists" \
               --arg update_needed "$update_needed" \
               '.request.target = $target | .request.status = $status | .request.source_hash = $source_hash | .request.target_hash = $target_hash | .request.pull_method = $pull_method | .request.image_exists = ($image_exists == "true") | .request.update_needed = ($update_needed == "true")' \
               "$audit_file" > "$temp_audit" && mv "$temp_audit" "$audit_file"
          fi
          
          # Set outputs
          echo "pull_success=$pull_success" >> $GITHUB_OUTPUT
          echo "push_success=$push_success" >> $GITHUB_OUTPUT
          echo "image_exists=$image_exists" >> $GITHUB_OUTPUT
          echo "update_needed=$update_needed" >> $GITHUB_OUTPUT
          echo "source_image=$SOURCE_IMAGE" >> $GITHUB_OUTPUT
          echo "target_image=$TARGET_IMAGE" >> $GITHUB_OUTPUT
          echo "source_hash=$source_hash" >> $GITHUB_OUTPUT
          echo "target_hash=$target_hash" >> $GITHUB_OUTPUT
          echo "pull_method=$pull_method" >> $GITHUB_OUTPUT
          echo "audit_file=$audit_file" >> $GITHUB_OUTPUT
          echo "image_mapping=$IMAGE_MAPPING" >> $GITHUB_OUTPUT
          
          echo "::group::üìà Final Results"
          echo "‚úÖ Pull success: $pull_success"
          echo "üì§ Push success: $push_success"
          echo "üì¶ Image existed: $image_exists"
          echo "üîÑ Update needed: $update_needed"
          echo "üîê Source hash: $source_hash"
          echo "üîê Target hash: $target_hash"
          echo "::endgroup::"
          
          exit 0
      
      - name: üìä Generate Job Summary
        if: always()
        continue-on-error: true
        run: |
          set +e  # Disable exit on error for summary generation
          
          echo "# üöÄ Docker Image Import Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**üïê Execution Time:** $(date -u +%Y-%m-%d\ %H:%M:%S\ UTC)" >> $GITHUB_STEP_SUMMARY
          echo "**üîÑ Workflow Run:** [\#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
          echo "**üë§ Requested by:** @${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Get values with defaults
          pull_success="${{ steps.docker_pull_push.outputs.pull_success || 'false' }}"
          push_success="${{ steps.docker_pull_push.outputs.push_success || 'false' }}"
          image_exists="${{ steps.docker_pull_push.outputs.image_exists || 'false' }}"
          update_needed="${{ steps.docker_pull_push.outputs.update_needed || 'false' }}"
          source_image="${{ steps.docker_pull_push.outputs.source_image || 'N/A' }}"
          target_image="${{ steps.docker_pull_push.outputs.target_image || 'N/A' }}"
          
          # Status determination
          if [ "$pull_success" = "true" ] && [ "$push_success" = "true" ]; then
            if [ "$image_exists" = "true" ] && [ "$update_needed" = "true" ]; then
              status="üîÑ Updated"
              status_color="üü°"
            elif [ "$image_exists" = "true" ] && [ "$update_needed" = "false" ]; then
              status="‚úÖ Up-to-date"
              status_color="üü¢"
            else
              status="üÜï Imported"
              status_color="üü¢"
            fi
          else
            status="‚ùå Failed"
            status_color="üî¥"
          fi
          
          # Statistics
          echo "## üìà Import Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| üéØ Overall Status | $status_color $status |" >> $GITHUB_STEP_SUMMARY
          echo "| üì• Pull Success | $([ "$pull_success" = "true" ] && echo "‚úÖ Yes" || echo "‚ùå No") |" >> $GITHUB_STEP_SUMMARY
          echo "| üì§ Push Success | $([ "$push_success" = "true" ] && echo "‚úÖ Yes" || echo "‚ùå No") |" >> $GITHUB_STEP_SUMMARY
          echo "| üì¶ Existed Before | $([ "$image_exists" = "true" ] && echo "‚úÖ Yes" || echo "‚ùå No") |" >> $GITHUB_STEP_SUMMARY
          echo "| üîÑ Update Needed | $([ "$update_needed" = "true" ] && echo "‚úÖ Yes" || echo "‚ùå No") |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Image details
          echo "## üê≥ Image Details" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Field | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| üì• Source Image | \`$source_image\` |" >> $GITHUB_STEP_SUMMARY
          echo "| üì§ Target Image | \`$target_image\` |" >> $GITHUB_STEP_SUMMARY
          
          # Hash information
          source_hash="${{ steps.docker_pull_push.outputs.source_hash }}"
          target_hash="${{ steps.docker_pull_push.outputs.target_hash }}"
          pull_method="${{ steps.docker_pull_push.outputs.pull_method }}"
          
          if [ -n "$source_hash" ] && [ "$source_hash" != "" ]; then
            echo "| üîê Source Hash | \`$source_hash\` |" >> $GITHUB_STEP_SUMMARY
          fi
          if [ -n "$target_hash" ] && [ "$target_hash" != "" ]; then
            echo "| üîê Target Hash | \`$target_hash\` |" >> $GITHUB_STEP_SUMMARY
          fi
          if [ -n "$pull_method" ] && [ "$pull_method" != "" ]; then
            echo "| üîß Pull Method | \`$pull_method\` |" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Image mapping info
          image_mapping="${{ steps.docker_pull_push.outputs.image_mapping }}"
          if [ -n "$image_mapping" ] && [ "$image_mapping" != "" ]; then
            echo "## üóÇÔ∏è Image Mapping" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "<details>" >> $GITHUB_STEP_SUMMARY
            echo "<summary>Click to expand mapping information</summary>" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "```json" >> $GITHUB_STEP_SUMMARY
            echo "$image_mapping" >> $GITHUB_STEP_SUMMARY
            echo "```" >> $GITHUB_STEP_SUMMARY
            echo "</details>" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Usage instructions
          echo "## üöÄ Usage Instructions" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "$pull_success" = "true" ] && [ "$push_success" = "true" ]; then
            echo "You can now use this image in your workflows:" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "```yaml" >> $GITHUB_STEP_SUMMARY
            echo "# In your GitHub Actions workflow:" >> $GITHUB_STEP_SUMMARY
            echo "- name: Use imported image" >> $GITHUB_STEP_SUMMARY
            echo "  uses: docker://$(echo "$target_image" | sed 's/ghcr.io\///')" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "# Or in docker-compose:" >> $GITHUB_STEP_SUMMARY
            echo "services:" >> $GITHUB_STEP_SUMMARY
            echo "  myservice:" >> $GITHUB_STEP_SUMMARY
            echo "    image: $target_image" >> $GITHUB_STEP_SUMMARY
            echo "```" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå Image import failed. Please check the logs above for details." >> $GITHUB_STEP_SUMMARY
          fi
          
          # Audit file info
          audit_file="${{ steps.docker_pull_push.outputs.audit_file }}"
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## üìã Audit Information" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ -n "$audit_file" ] && [ "$audit_file" != "" ]; then
            echo "- **üìù Audit File:** \`$audit_file\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **üìù Audit File:** Not available" >> $GITHUB_STEP_SUMMARY
          fi
          echo "- **üîç Full import trail available in workflow logs**" >> $GITHUB_STEP_SUMMARY
          
          exit 0

      - name: üí¨ Update issue with results
        if: always()
        uses: actions/github-script@v6
        env:
          PULL_SUCCESS: ${{ steps.docker_pull_push.outputs.pull_success }}
          PUSH_SUCCESS: ${{ steps.docker_pull_push.outputs.push_success }}
          IMAGE_EXISTS: ${{ steps.docker_pull_push.outputs.image_exists }}
          UPDATE_NEEDED: ${{ steps.docker_pull_push.outputs.update_needed }}
          SOURCE_IMAGE: ${{ steps.docker_pull_push.outputs.source_image }}
          TARGET_IMAGE: ${{ steps.docker_pull_push.outputs.target_image }}
          SOURCE_HASH: ${{ steps.docker_pull_push.outputs.source_hash }}
          TARGET_HASH: ${{ steps.docker_pull_push.outputs.target_hash }}
          PULL_METHOD: ${{ steps.docker_pull_push.outputs.pull_method }}
          IMAGE_MAPPING: ${{ steps.docker_pull_push.outputs.image_mapping }}
        with:
          script: |
            const pullSuccess = process.env.PULL_SUCCESS === 'true';
            const pushSuccess = process.env.PUSH_SUCCESS === 'true';
            const imageExists = process.env.IMAGE_EXISTS === 'true';
            const updateNeeded = process.env.UPDATE_NEEDED === 'true';
            const sourceImage = process.env.SOURCE_IMAGE || 'N/A';
            const targetImage = process.env.TARGET_IMAGE || 'N/A';
            const sourceHash = process.env.SOURCE_HASH || '';
            const targetHash = process.env.TARGET_HASH || '';
            const pullMethod = process.env.PULL_METHOD || '';
            const imageMapping = process.env.IMAGE_MAPPING || '';
            const workflowRunUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
            
            let commentBody = '';
            let labels = ['import-request'];
            
            // Remove processing label
            try {
              await github.rest.issues.removeLabel({
                issue_number: context.payload.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                name: 'processing'
              });
            } catch (error) {
              console.log('Processing label not found or already removed');
            }
            
            if (!pullSuccess) {
              // Pull failed
              commentBody = `## ‚ùå Import Failed - Pull Error
              
              Failed to pull the source image. This could be due to:
              - Image doesn't exist on Docker Hub
              - Incorrect image name or repository
              - Network connectivity issues
              - Authentication problems
              
              **üìã Request Details:**
              - **Source:** \`${sourceImage}\`
              - **Target:** \`${targetImage}\`
              - **Pull Method Attempted:** \`${pullMethod || 'direct'}\`
              
              **üîó Links:**
              - [üìã Workflow Logs](${workflowRunUrl})
              - [üê≥ Check Docker Hub](https://hub.docker.com/search?q=${encodeURIComponent(sourceImage.split(':')[0])})
              
              Please verify the image name and try again.`;
              
              labels.push('failed', 'pull-error');
            } else if (!pushSuccess) {
              // Push failed
              commentBody = `## ‚ùå Import Failed - Push Error
              
              Successfully pulled the source image but failed to push to GitHub Container Registry.
              
              **üìã Details:**
              - **Source:** \`${sourceImage}\` ‚úÖ
              - **Target:** \`${targetImage}\` ‚ùå
              - **Source Hash:** \`${sourceHash}\`
              - **Pull Method:** \`${pullMethod}\`
              
              **üîó Links:**
              - [üìã Workflow Logs](${workflowRunUrl})
              
              This is likely a temporary issue. Please try again later.`;
              
              labels.push('failed', 'push-error');
            } else if (imageExists && !updateNeeded) {
              // Image exists and no update needed
              commentBody = `## ‚úÖ Image Already Up-to-Date
              
              The requested image already exists and is up-to-date in GitHub Container Registry.
              
              **üìã Details:**
              - **Source:** \`${sourceImage}\`
              - **Target:** \`${targetImage}\`
              - **Hash:** \`${sourceHash}\`
              - **Status:** No changes detected
              
              **üöÄ Usage:**
              \`\`\`yaml
              # Use in GitHub Actions:
              uses: docker://${targetImage.replace('ghcr.io/', '')}
              
              # Use in docker-compose:
              image: ${targetImage}
              \`\`\`
              
              **üîó Links:**
              - [üìã Workflow Logs](${workflowRunUrl})
              - [üì¶ View Package](https://github.com/orgs/${context.repo.owner}/packages)`;
              
              labels.push('resolved', 'up-to-date');
            } else if (imageExists && updateNeeded) {
              // Image was updated
              commentBody = `## üîÑ Image Successfully Updated
              
              Successfully updated the existing image with the latest version.
              
              **üìã Update Details:**
              - **Source:** \`${sourceImage}\`
              - **Target:** \`${targetImage}\`
              - **Previous Hash:** \`${targetHash}\`
              - **New Hash:** \`${sourceHash}\`
              - **Pull Method:** \`${pullMethod}\`
              - **Updated:** ${new Date().toISOString()}
              
              **üöÄ Usage:**
              \`\`\`yaml
              # Use in GitHub Actions:
              uses: docker://${targetImage.replace('ghcr.io/', '')}
              
              # Use in docker-compose:
              image: ${targetImage}
              \`\`\`
              
              ${imageMapping ? `**üóÇÔ∏è Mapping Info:**
              \`\`\`json
              ${imageMapping}
              \`\`\`` : ''}
              
              **üîó Links:**
              - [üìã Workflow Logs](${workflowRunUrl})
              - [üì¶ View Package](https://github.com/orgs/${context.repo.owner}/packages)`;
              
              labels.push('resolved', 'updated');
            } else {
              // New image imported
              commentBody = `## üéâ Image Successfully Imported
              
              Successfully imported the requested image to GitHub Container Registry.
              
              **üìã Import Details:**
              - **Source:** \`${sourceImage}\`
              - **Target:** \`${targetImage}\`
              - **Hash:** \`${sourceHash}\`
              - **Pull Method:** \`${pullMethod}\`
              - **Imported:** ${new Date().toISOString()}
              - **Imported by:** @${context.actor}
              
              **üöÄ Usage:**
              \`\`\`yaml
              # Use in GitHub Actions:
              uses: docker://${targetImage.replace('ghcr.io/', '')}
              
              # Use in docker-compose:
              image: ${targetImage}
              \`\`\`
              
              ${imageMapping ? `**üóÇÔ∏è Mapping Info:**
              \`\`\`json
              ${imageMapping}
              \`\`\`` : ''}
              
              **üîó Links:**
              - [üìã Workflow Logs](${workflowRunUrl})
              - [üì¶ View Package](https://github.com/orgs/${context.repo.owner}/packages)
              
              Thank you for contributing to our image collection! üôè`;
              
              labels.push('resolved', 'imported');
            }
            
            // Add comment
            await github.rest.issues.createComment({
              issue_number: context.payload.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            });
            
            // Update labels and close issue
            await github.rest.issues.update({
              issue_number: context.payload.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'closed',
              labels: labels
            });

      - name: üì§ Upload Audit File
        if: always() && steps.docker_pull_push.outputs.audit_file != ''
        uses: actions/upload-artifact@v4
        with:
          name: image-import-audit-${{ github.run_id }}
          path: ${{ steps.docker_pull_push.outputs.audit_file }}
          retention-days: 90
          if-no-files-found: warn